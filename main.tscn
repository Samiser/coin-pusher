[gd_scene load_steps=23 format=3 uid="uid://dhljcf5oo4jun"]

[ext_resource type="Script" uid="uid://0dov62wq86il" path="res://main.gd" id="1_h2yge"]
[ext_resource type="PackedScene" uid="uid://dwdc85om4xhvs" path="res://Objects/Coin/coin.tscn" id="2_h2yge"]
[ext_resource type="PackedScene" uid="uid://b028rg20gl7fs" path="res://UI/ui.tscn" id="3_lquwl"]
[ext_resource type="Texture2D" uid="uid://dkf6nq5goa3yv" path="res://UI/Sprites/ui_cam_frame.png" id="6_4c57u"]
[ext_resource type="AudioStream" uid="uid://dctl87ig7epc0" path="res://Audio/money.mp3" id="6_7mycd"]
[ext_resource type="AudioStream" uid="uid://b32lbj7yjirtx" path="res://Audio/oh_my_goodness.mp3" id="7_4c57u"]
[ext_resource type="PackedScene" uid="uid://dh0gg8lf7jnqg" path="res://Objects/CoinMachine/coin_machine.tscn" id="7_5vw27"]
[ext_resource type="Theme" uid="uid://c2k242pbhj3qy" path="res://UI/hud_default_text_theme.tres" id="7_efxa6"]
[ext_resource type="AudioStream" uid="uid://dibud4fo6il0g" path="res://Audio/bgm.mp3" id="8_5vw27"]
[ext_resource type="AudioStream" uid="uid://c2su6o3p8tr4q" path="res://Audio/what_is_going_on.mp3" id="10_4c57u"]
[ext_resource type="PackedScene" uid="uid://ccqhi6u341k5x" path="res://Meshes/Tape/tape_obj.tscn" id="11_efxa6"]

[sub_resource type="Gradient" id="Gradient_272bh"]
offsets = PackedFloat32Array(0, 0.348974, 1)
colors = PackedColorArray(0.286204, 0.587006, 0.948614, 1, 0.248003, 0.422884, 0.904303, 1, 0.881133, 0.877524, 0.997683, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5vw27"]
noise_type = 2
seed = 69
frequency = 0.0136
fractal_octaves = 10

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_kek77"]
width = 256
height = 256
seamless = true
color_ramp = SubResource("Gradient_272bh")
noise = SubResource("FastNoiseLite_5vw27")

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_4c57u"]
panorama = SubResource("NoiseTexture2D_kek77")

[sub_resource type="Sky" id="Sky_272bh"]
sky_material = SubResource("PanoramaSkyMaterial_4c57u")

[sub_resource type="Environment" id="Environment_5vw27"]
background_mode = 2
sky = SubResource("Sky_272bh")
ambient_light_source = 3
ambient_light_color = Color(0.00392157, 0, 0.0941176, 1)
ambient_light_sky_contribution = 0.25
reflected_light_source = 2
glow_intensity = 1.0
glow_bloom = 0.1
fog_mode = 1
fog_light_color = Color(0.233598, 0.429594, 0.894259, 1)
fog_density = 0.6705
fog_aerial_perspective = 0.073
fog_sky_affect = 0.369
fog_height = 33.2
volumetric_fog_density = 0.4136

[sub_resource type="QuadMesh" id="QuadMesh_4c57u"]

[sub_resource type="Shader" id="Shader_4c57u"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * 0.001;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_4c57u"]
frequency = 0.1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_efxa6"]
width = 1024
height = 1024
seamless = true
as_normal_map = true
bump_strength = 2.0
noise = SubResource("FastNoiseLite_4c57u")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_efxa6"]
render_priority = 0
shader = SubResource("Shader_4c57u")
shader_parameter/albedo = Color(0, 0.372549, 0.74902, 0.203922)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.076
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.29
shader_parameter/metallic = 0.6
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_efxa6")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_efxa6")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.06, 1, 0.06)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[node name="Main" type="Node3D"]
script = ExtResource("1_h2yge")
coin_scene = ExtResource("2_h2yge")

[node name="CoinMachine" parent="." instance=ExtResource("7_5vw27")]

[node name="UI" parent="." instance=ExtResource("3_lquwl")]

[node name="pusher_cam" type="TextureRect" parent="UI"]
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 19.0
offset_top = 20.0
offset_right = 467.0
offset_bottom = 309.0
grow_vertical = 0
texture = ExtResource("6_4c57u")

[node name="SubViewportContainer" type="SubViewportContainer" parent="UI/pusher_cam"]
layout_mode = 1
offset_left = 30.0
offset_top = 28.0
offset_right = 419.0
offset_bottom = 234.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="UI/pusher_cam/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(389, 206)
render_target_update_mode = 4

[node name="PusherCamera" type="Camera3D" parent="UI/pusher_cam/SubViewportContainer/SubViewport"]
transform = Transform3D(0.72141, -0.320314, 0.613976, -0.0244208, 0.874279, 0.48481, -0.692077, -0.364741, 0.622891, 0.870725, 0.549419, 0.87942)
projection = 1
fov = 40.2
size = 0.8

[node name="coins_subtitle2" type="RichTextLabel" parent="UI/pusher_cam"]
clip_contents = false
layout_mode = 1
anchors_preset = -1
offset_left = 168.0
offset_top = 212.0
offset_right = 439.0
offset_bottom = 322.0
theme = ExtResource("7_efxa6")
text = "Pusher Cam"
horizontal_alignment = 2
vertical_alignment = 2

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.99863, 0.052336, 0, -0.052336, 0.99863, -0.010263, 0.924324, 2.1271)
current = true
fov = 80.0

[node name="vine_stream" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("7_4c57u")
volume_db = -18.695

[node name="money_stream" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("6_7mycd")
volume_db = -20.952
max_polyphony = 4

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_5vw27")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="WorldEnvironment"]
transform = Transform3D(0.964443, 0.203801, 0.168268, 0.137798, -0.931054, 0.33786, 0.225523, -0.30266, -0.926033, -0.0598902, 0.798492, -0.169266)

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("8_5vw27")
volume_db = -20.0
autoplay = true

[node name="AudioStreamPlayer2D2" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("10_4c57u")
autoplay = true

[node name="water_quad" type="MeshInstance3D" parent="."]
transform = Transform3D(1512, 0, 0, 0, -6.60916e-05, 1, 0, -1512, -4.37114e-08, 0, -0.378463, -65.5435)
mesh = SubResource("QuadMesh_4c57u")
surface_material_override/0 = SubResource("ShaderMaterial_efxa6")

[node name="TapeObj" parent="." instance=ExtResource("11_efxa6")]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, -0.696864, -0.0704472, 0.225102)
